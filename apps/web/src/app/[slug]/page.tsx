import { notFound } from 'next/navigation';
import { MDXRemote } from 'next-mdx-remote/rsc';
import { Metadata } from 'next';
import {
  getAllContentSlugs,
  getContentBySlug,
  getRelatedContent,
  generateSchemaOrg,
} from '@/lib/content/mdx';

// Generate static params for all content
export async function generateStaticParams() {
  const slugs = await getAllContentSlugs();
  return slugs.map(slug => ({ slug }));
}

// Generate metadata for SEO
export async function generateMetadata({
  params,
}: {
  params: { slug: string };
}): Promise<Metadata> {
  const content = await getContentBySlug(params.slug);

  if (!content) {
    return {
      title: 'Not Found',
      description: 'The requested content could not be found.',
    };
  }

  const { frontmatter } = content;

  return {
    title: frontmatter.seo.title,
    description: frontmatter.seo.description,
    keywords: frontmatter.seo.keywords,
    authors: [{ name: frontmatter.author }],
    openGraph: {
      type: 'article',
      title: frontmatter.title,
      description: frontmatter.description,
      publishedTime: frontmatter.publishedAt,
      modifiedTime: frontmatter.updatedAt,
      authors: [frontmatter.author],
      tags: frontmatter.tags,
    },
    twitter: {
      card: 'summary_large_image',
      title: frontmatter.seo.title,
      description: frontmatter.seo.description,
    },
    alternates: {
      canonical: `https://avolve.com/${params.slug}`,
    },
  };
}

// MDX Components
const components = {
  h1: (props: any) => (
    <h1
      className="text-4xl font-bold tracking-tight mb-6 mt-8"
      {...props}
    />
  ),
  h2: (props: any) => (
    <h2
      className="text-3xl font-bold tracking-tight mb-4 mt-8"
      {...props}
    />
  ),
  h3: (props: any) => (
    <h3
      className="text-2xl font-semibold tracking-tight mb-3 mt-6"
      {...props}
    />
  ),
  p: (props: any) => <p className="mb-4 leading-7" {...props} />,
  ul: (props: any) => <ul className="list-disc list-inside mb-4 space-y-2" {...props} />,
  ol: (props: any) => <ol className="list-decimal list-inside mb-4 space-y-2" {...props} />,
  li: (props: any) => <li className="ml-4" {...props} />,
  a: (props: any) => (
    <a
      className="text-primary hover:underline font-medium"
      target="_blank"
      rel="noopener noreferrer"
      {...props}
    />
  ),
  code: (props: any) => (
    <code
      className="bg-muted px-1.5 py-0.5 rounded text-sm font-mono"
      {...props}
    />
  ),
  pre: (props: any) => (
    <pre
      className="bg-muted p-4 rounded-lg overflow-x-auto mb-4 border"
      {...props}
    />
  ),
  blockquote: (props: any) => (
    <blockquote
      className="border-l-4 border-primary pl-4 italic my-4 text-muted-foreground"
      {...props}
    />
  ),
  table: (props: any) => (
    <div className="overflow-x-auto mb-4">
      <table className="w-full border-collapse border" {...props} />
    </div>
  ),
  th: (props: any) => (
    <th className="border p-2 bg-muted font-semibold text-left" {...props} />
  ),
  td: (props: any) => <td className="border p-2" {...props} />,
  // Custom components
  Callout: ({ type = 'info', children }: { type?: string; children: React.ReactNode }) => {
    const styles = {
      info: 'bg-blue-50 border-blue-200 text-blue-900',
      success: 'bg-green-50 border-green-200 text-green-900',
      warning: 'bg-yellow-50 border-yellow-200 text-yellow-900',
      error: 'bg-red-50 border-red-200 text-red-900',
    };

    return (
      <div className={`border-l-4 p-4 mb-4 rounded ${styles[type as keyof typeof styles] || styles.info}`}>
        {children}
      </div>
    );
  },
  Metadata: ({ children }: { children: React.ReactNode }) => (
    <div className="bg-muted/50 border rounded-lg p-4 mt-8 text-sm text-muted-foreground">
      {children}
    </div>
  ),
  GeneratedBy: ({ children }: { children: React.ReactNode }) => (
    <div className="font-medium">🤖 Generated by: {children}</div>
  ),
  BasedOn: ({ children }: { children: React.ReactNode }) => (
    <div className="mt-2">📊 Based on: {children}</div>
  ),
  Source: ({ type, file }: { type: string; file?: string }) => (
    <div className="mt-1">• {type}{file && `: ${file}`}</div>
  ),
  AnalysisDate: ({ children }: { children: React.ReactNode }) => (
    <div className="mt-1">📅 Analysis Date: {children}</div>
  ),
  DataPoints: ({ children }: { children: React.ReactNode }) => (
    <div className="mt-1">📈 Data Points: {children}</div>
  ),
  Confidence: ({ children }: { children: React.ReactNode }) => (
    <div className="mt-1">✓ Confidence: {children}</div>
  ),
  LastUpdated: ({ children }: { children: React.ReactNode }) => (
    <div className="mt-1">🔄 Last Updated: {children}</div>
  ),
  NextReview: ({ children }: { children: React.ReactNode }) => (
    <div className="mt-1">⏭️ Next Review: {children}</div>
  ),
};

export default async function ContentPage({
  params,
}: {
  params: { slug: string };
}) {
  const content = await getContentBySlug(params.slug);

  if (!content) {
    notFound();
  }

  const relatedContent = await getRelatedContent(params.slug);
  const schemaOrg = generateSchemaOrg(content);

  return (
    <>
      {/* Schema.org structured data */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify(schemaOrg),
        }}
      />

      <article className="container max-w-4xl mx-auto px-4 py-12">
        {/* Article Header */}
        <header className="mb-8">
          <div className="flex flex-wrap gap-2 mb-4">
            {content.frontmatter.tags.map(tag => (
              <span
                key={tag}
                className="px-3 py-1 bg-primary/10 text-primary rounded-full text-sm"
              >
                {tag}
              </span>
            ))}
          </div>

          <h1 className="text-5xl font-bold tracking-tight mb-4">
            {content.frontmatter.title}
          </h1>

          <p className="text-xl text-muted-foreground mb-6">
            {content.frontmatter.description}
          </p>

          <div className="flex items-center gap-6 text-sm text-muted-foreground">
            <div>
              <span className="font-medium">By</span> {content.frontmatter.author}
            </div>
            <div>
              <span className="font-medium">Published</span>{' '}
              {new Date(content.frontmatter.publishedAt).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </div>
            {content.frontmatter.intelligence && (
              <div className="flex items-center gap-2">
                <span className="font-medium">Intelligence</span>
                <span className="px-2 py-0.5 bg-green-100 text-green-700 rounded text-xs">
                  {Math.round(content.frontmatter.intelligence.confidence * 100)}% confidence
                </span>
              </div>
            )}
          </div>
        </header>

        {/* Article Content */}
        <div className="prose prose-lg max-w-none">
          <MDXRemote source={content.content} components={components} />
        </div>

        {/* Related Content */}
        {relatedContent.length > 0 && (
          <aside className="mt-12 pt-8 border-t">
            <h2 className="text-2xl font-bold mb-6">Related Insights</h2>
            <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
              {relatedContent.map(related => (
                <a
                  key={related.slug}
                  href={`/${related.slug}`}
                  className="block p-6 border rounded-lg hover:shadow-md transition-shadow"
                >
                  <h3 className="font-semibold mb-2">{related.frontmatter.title}</h3>
                  <p className="text-sm text-muted-foreground line-clamp-3">
                    {related.excerpt}
                  </p>
                  <div className="mt-4 text-sm text-primary font-medium">
                    Read more →
                  </div>
                </a>
              ))}
            </div>
          </aside>
        )}
      </article>
    </>
  );
}